// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fsGenerator generates correct files: jsonc 1`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { Language } from \\"./types\\"
const lang = {
  thisIsATest: (): string => \\"This is a test file\\",
  trailingCommasBenefit: (): string => \\"Trailing commas allow for cleaner git diffs\\",
}
export default lang as Language
"
`;

exports[`fsGenerator generates correct files: jsonc 2`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
export type DeepPartial<T> = { [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]; }
export interface Language {
thisIsATest: (p?: { [key: string]: string | number }) => string,
trailingCommasBenefit: (p?: { [key: string]: string | number }) => string,
}
//# sourceMappingURL=types.d.ts.map
"
`;

exports[`fsGenerator generates correct files: jsonc 3`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import en from './en'
import { Language, DeepPartial } from './types'

/**
 * Merges two languages together, preferring the preferred language where possible
 * @param preferredLang The preferred language. NB: may be modified
 * @param defaultLang The default language. NB: may be modified
 */
export const merge = (preferredLang: DeepPartial<Language>, defaultLang: Language): Language => {
  for (const key in defaultLang) {
    if (key in preferredLang) {
      if (typeof (preferredLang as any)[key] === 'object') {
        (preferredLang as any)[key] = merge((preferredLang as any)[key], (defaultLang as any)[key])
      }
    } else {
      (preferredLang as any)[key] = (defaultLang as any)[key]
    }
  }
  return preferredLang as Language
}

export const languages = { en }

export const defaultLanguage = en

export const defaultLanguageCode = \\"en\\""
`;

exports[`fsGenerator generates correct files: jsonc 4`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { merge, languages, defaultLanguage } from './utils'
import { Language } from './types'

// Preferred languages, as specified by the user's browser
const preferredLanguages =
  ((navigator.languages ? navigator.languages : [navigator.language]) ?? [])
    .flatMap(lang => lang.length > 2 ? [lang, lang.slice(0, 2)] : lang)
    .filter((l, i, arr) => arr.indexOf(l) === i)
    .slice(0, 25)

let language: Language = defaultLanguage // fallback language
for (let i = preferredLanguages.length; i > 0; i--) {
  const key = preferredLanguages[i] as keyof typeof languages
  if (key in languages) {
    language = merge(languages[key], language)
  }
}

export default language
"
`;

exports[`fsGenerator generates correct files: jsonc 5`] = `
"en.ts
types.d.ts
utils.ts
browser.ts
types.d.ts.map
.gitignore"
`;

exports[`fsGenerator generates correct files: jsonc 6`] = `"{\\"version\\":3,\\"sources\\":[\\"../resources/jsonc/en.jsonc\\"],\\"names\\":[],\\"mappings\\":\\";;;0BAAA;AAEG;AAGA\\",\\"file\\":\\"types.d.ts\\"}"`;

exports[`fsGenerator generates correct files: large 1`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { Language } from \\"./types\\"
const lang = {
  yes: (): string => \\"Yes\\",
  no: (): string => \\"No\\",
  thereAreXFeatures: (p: { count: number }): string => p.count === 1 ? (\\"There is \\" + p.count.toString() + \\" feature\\") : lang.thereAreXFeatures_plural(p),
  thereAreXFeatures_plural: (p: { count: string | number }): string => \\"There are \\" + p.count.toString() + \\" features\\",
  nested: {
    works: {
      correctly: (): string => \\"Nested works correctly\\",
      really: {
        well: (): string => \\"Nested works really well\\",
      },
    },
  },
  andYouCanMissKeys: (): string => \\"And you can miss keys in non-default languages\\",
  orHaveDifferentPlaceholders: (p: { firstName: string | number }): string => \\"Or have different placeholders, \\" + p.firstName.toString() + \\"\\",
  manyParameters: (p: { title: string | number, firstName: string | number, lastName: string | number }): string => \\"You can have many parameters, \\" + p.title.toString() + \\" \\" + p.firstName.toString() + \\" \\" + p.lastName.toString() + \\"!\\",
}
export default lang as Language
"
`;

exports[`fsGenerator generates correct files: large 2`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { Language, DeepPartial } from \\"./types\\"
const lang = {
  yes: (): string => \\"Oui\\",
  no: (): string => \\"Non\\",
  thereAreXFeatures: (p: { count: number }): string => p.count === 1 ? (\\"Il y a \\" + p.count.toString() + \\" fonctionnalité\\") : lang.thereAreXFeatures_plural(p),
  thereAreXFeatures_plural: (p: { count: string | number }): string => \\"Il y a \\" + p.count.toString() + \\" fonctionnalités\\",
  nested: {
    works: {
      correctly: (): string => \\"Imbriqué fonctionne correctement\\",
      really: {
        well: (): string => \\"Imbriqué fonctionne très bien\\",
      },
    },
  },
  orHaveDifferentPlaceholders: (p: { username: string | number }): string => \\"Ou avoir des espaces réservés différents, \\" + p.username.toString() + \\"\\",
}
export default lang as DeepPartial<Language>
"
`;

exports[`fsGenerator generates correct files: large 3`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
export type DeepPartial<T> = { [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]; }
export interface Language {
yes: (p?: { [key: string]: string | number }) => string,
no: (p?: { [key: string]: string | number }) => string,
thereAreXFeatures: (p: { count: number, [key: string]: string | number }) => string,
nested: {
works: {
correctly: (p?: { [key: string]: string | number }) => string,
really: {
well: (p?: { [key: string]: string | number }) => string,
},
},
},
andYouCanMissKeys: (p?: { [key: string]: string | number }) => string,
orHaveDifferentPlaceholders: (p: { firstName: string | number, username: string | number, [key: string]: string | number }) => string,
manyParameters: (p: { title: string | number, firstName: string | number, lastName: string | number, [key: string]: string | number }) => string,
}
//# sourceMappingURL=types.d.ts.map
"
`;

exports[`fsGenerator generates correct files: large 4`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import en from './en'
import fr from './fr'
import { Language, DeepPartial } from './types'

/**
 * Merges two languages together, preferring the preferred language where possible
 * @param preferredLang The preferred language. NB: may be modified
 * @param defaultLang The default language. NB: may be modified
 */
export const merge = (preferredLang: DeepPartial<Language>, defaultLang: Language): Language => {
  for (const key in defaultLang) {
    if (key in preferredLang) {
      if (typeof (preferredLang as any)[key] === 'object') {
        (preferredLang as any)[key] = merge((preferredLang as any)[key], (defaultLang as any)[key])
      }
    } else {
      (preferredLang as any)[key] = (defaultLang as any)[key]
    }
  }
  return preferredLang as Language
}

export const languages = { en, fr }

export const defaultLanguage = en

export const defaultLanguageCode = \\"en\\""
`;

exports[`fsGenerator generates correct files: large 5`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { merge, languages, defaultLanguage } from './utils'
import { Language } from './types'

// Preferred languages, as specified by the user's browser
const preferredLanguages =
  ((navigator.languages ? navigator.languages : [navigator.language]) ?? [])
    .flatMap(lang => lang.length > 2 ? [lang, lang.slice(0, 2)] : lang)
    .filter((l, i, arr) => arr.indexOf(l) === i)
    .slice(0, 25)

let language: Language = defaultLanguage // fallback language
for (let i = preferredLanguages.length; i > 0; i--) {
  const key = preferredLanguages[i] as keyof typeof languages
  if (key in languages) {
    language = merge(languages[key], language)
  }
}

export default language
"
`;

exports[`fsGenerator generates correct files: large 6`] = `
"en.ts
fr.ts
types.d.ts
utils.ts
browser.ts
types.d.ts.map
.gitignore"
`;

exports[`fsGenerator generates correct files: large 7`] = `"{\\"version\\":3,\\"sources\\":[\\"../resources/large/en.json\\"],\\"names\\":[],\\"mappings\\":\\";;;0BAAA;AACG;AACA;AACA;AAEA;AACE;AACE;AACA;AACE;;;;AAIN;AACA;AACA\\",\\"file\\":\\"types.d.ts\\"}"`;

exports[`fsGenerator generates correct files: paramInNonDefaultLangOnly 1`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { Language } from \\"./types\\"
const lang = {
  greeting: (): string => \\"Hello\\",
}
export default lang as Language
"
`;

exports[`fsGenerator generates correct files: paramInNonDefaultLangOnly 2`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { Language, DeepPartial } from \\"./types\\"
const lang = {
  greeting: (p: { name: string | number }): string => \\"Bonjour \\" + p.name.toString() + \\"\\",
}
export default lang as DeepPartial<Language>
"
`;

exports[`fsGenerator generates correct files: paramInNonDefaultLangOnly 3`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
export type DeepPartial<T> = { [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]; }
export interface Language {
greeting: (p: { name: string | number, [key: string]: string | number }) => string,
}
//# sourceMappingURL=types.d.ts.map
"
`;

exports[`fsGenerator generates correct files: paramInNonDefaultLangOnly 4`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import en from './en'
import fr from './fr'
import { Language, DeepPartial } from './types'

/**
 * Merges two languages together, preferring the preferred language where possible
 * @param preferredLang The preferred language. NB: may be modified
 * @param defaultLang The default language. NB: may be modified
 */
export const merge = (preferredLang: DeepPartial<Language>, defaultLang: Language): Language => {
  for (const key in defaultLang) {
    if (key in preferredLang) {
      if (typeof (preferredLang as any)[key] === 'object') {
        (preferredLang as any)[key] = merge((preferredLang as any)[key], (defaultLang as any)[key])
      }
    } else {
      (preferredLang as any)[key] = (defaultLang as any)[key]
    }
  }
  return preferredLang as Language
}

export const languages = { en, fr }

export const defaultLanguage = en

export const defaultLanguageCode = \\"en\\""
`;

exports[`fsGenerator generates correct files: paramInNonDefaultLangOnly 5`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { merge, languages, defaultLanguage } from './utils'
import { Language } from './types'

// Preferred languages, as specified by the user's browser
const preferredLanguages =
  ((navigator.languages ? navigator.languages : [navigator.language]) ?? [])
    .flatMap(lang => lang.length > 2 ? [lang, lang.slice(0, 2)] : lang)
    .filter((l, i, arr) => arr.indexOf(l) === i)
    .slice(0, 25)

let language: Language = defaultLanguage // fallback language
for (let i = preferredLanguages.length; i > 0; i--) {
  const key = preferredLanguages[i] as keyof typeof languages
  if (key in languages) {
    language = merge(languages[key], language)
  }
}

export default language
"
`;

exports[`fsGenerator generates correct files: paramInNonDefaultLangOnly 6`] = `
"en.ts
fr.ts
types.d.ts
utils.ts
browser.ts
types.d.ts.map
.gitignore"
`;

exports[`fsGenerator generates correct files: paramInNonDefaultLangOnly 7`] = `"{\\"version\\":3,\\"sources\\":[\\"../resources/paramInNonDefaultLangOnly/en.json\\"],\\"names\\":[],\\"mappings\\":\\";;;0BAAA;AACG\\",\\"file\\":\\"types.d.ts\\"}"`;

exports[`fsGenerator generates correct files: paramInPluralOnly 1`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { Language } from \\"./types\\"
const lang = {
  youHaveXNewMessages: (p: { count: number }): string => p.count === 1 ? (\\"You have \\" + p.count.toString() + \\" new message\\") : lang.youHaveXNewMessages_plural(p),
  youHaveXNewMessages_plural: (p: { count: string | number, name: string | number }): string => \\"You have \\" + p.count.toString() + \\" new messages, \\" + p.name.toString() + \\"\\",
}
export default lang as Language
"
`;

exports[`fsGenerator generates correct files: paramInPluralOnly 2`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
export type DeepPartial<T> = { [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]; }
export interface Language {
youHaveXNewMessages: (p: { count: number, name: string | number, [key: string]: string | number }) => string,
}
//# sourceMappingURL=types.d.ts.map
"
`;

exports[`fsGenerator generates correct files: paramInPluralOnly 3`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import en from './en'
import { Language, DeepPartial } from './types'

/**
 * Merges two languages together, preferring the preferred language where possible
 * @param preferredLang The preferred language. NB: may be modified
 * @param defaultLang The default language. NB: may be modified
 */
export const merge = (preferredLang: DeepPartial<Language>, defaultLang: Language): Language => {
  for (const key in defaultLang) {
    if (key in preferredLang) {
      if (typeof (preferredLang as any)[key] === 'object') {
        (preferredLang as any)[key] = merge((preferredLang as any)[key], (defaultLang as any)[key])
      }
    } else {
      (preferredLang as any)[key] = (defaultLang as any)[key]
    }
  }
  return preferredLang as Language
}

export const languages = { en }

export const defaultLanguage = en

export const defaultLanguageCode = \\"en\\""
`;

exports[`fsGenerator generates correct files: paramInPluralOnly 4`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { merge, languages, defaultLanguage } from './utils'
import { Language } from './types'

// Preferred languages, as specified by the user's browser
const preferredLanguages =
  ((navigator.languages ? navigator.languages : [navigator.language]) ?? [])
    .flatMap(lang => lang.length > 2 ? [lang, lang.slice(0, 2)] : lang)
    .filter((l, i, arr) => arr.indexOf(l) === i)
    .slice(0, 25)

let language: Language = defaultLanguage // fallback language
for (let i = preferredLanguages.length; i > 0; i--) {
  const key = preferredLanguages[i] as keyof typeof languages
  if (key in languages) {
    language = merge(languages[key], language)
  }
}

export default language
"
`;

exports[`fsGenerator generates correct files: paramInPluralOnly 5`] = `
"en.ts
types.d.ts
utils.ts
browser.ts
types.d.ts.map
.gitignore"
`;

exports[`fsGenerator generates correct files: paramInPluralOnly 6`] = `"{\\"version\\":3,\\"sources\\":[\\"../resources/paramInPluralOnly/en.json\\"],\\"names\\":[],\\"mappings\\":\\";;;0BAAA;AACG\\",\\"file\\":\\"types.d.ts\\"}"`;

exports[`fsGenerator generates correct files: simple 1`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { Language } from \\"./types\\"
const lang = {
  thereAreXFeatures: (p: { count: number }): string => p.count === 1 ? (\\"There is \\" + p.count.toString() + \\" feature\\") : lang.thereAreXFeatures_plural(p),
  thereAreXFeatures_plural: (p: { count: string | number }): string => \\"There are \\" + p.count.toString() + \\" features\\",
  nested: {
    works: (): string => \\"Nested works\\",
  },
  andYouCanMissKeys: (): string => \\"And you can miss keys in non-default languages\\",
  orHaveDifferentPlaceholders: (p: { firstName: string | number }): string => \\"Or have different placeholders, \\" + p.firstName.toString() + \\"\\",
}
export default lang as Language
"
`;

exports[`fsGenerator generates correct files: simple 2`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { Language, DeepPartial } from \\"./types\\"
const lang = {
  thereAreXFeatures: (p: { count: number }): string => p.count === 1 ? (\\"Il y a \\" + p.count.toString() + \\" fonctionnalité\\") : lang.thereAreXFeatures_plural(p),
  thereAreXFeatures_plural: (p: { count: string | number }): string => \\"Il y a \\" + p.count.toString() + \\" fonctionnalités\\",
  nested: {
    works: (): string => \\"Imbriqué fonctionne\\",
  },
  orHaveDifferentPlaceholders: (p: { username: string | number }): string => \\"Ou avoir des espaces réservés différents, \\" + p.username.toString() + \\"\\",
}
export default lang as DeepPartial<Language>
"
`;

exports[`fsGenerator generates correct files: simple 3`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
export type DeepPartial<T> = { [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]; }
export interface Language {
thereAreXFeatures: (p: { count: number, [key: string]: string | number }) => string,
nested: {
works: (p?: { [key: string]: string | number }) => string,
},
andYouCanMissKeys: (p?: { [key: string]: string | number }) => string,
orHaveDifferentPlaceholders: (p: { firstName: string | number, username: string | number, [key: string]: string | number }) => string,
}
//# sourceMappingURL=types.d.ts.map
"
`;

exports[`fsGenerator generates correct files: simple 4`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import en from './en'
import fr from './fr'
import { Language, DeepPartial } from './types'

/**
 * Merges two languages together, preferring the preferred language where possible
 * @param preferredLang The preferred language. NB: may be modified
 * @param defaultLang The default language. NB: may be modified
 */
export const merge = (preferredLang: DeepPartial<Language>, defaultLang: Language): Language => {
  for (const key in defaultLang) {
    if (key in preferredLang) {
      if (typeof (preferredLang as any)[key] === 'object') {
        (preferredLang as any)[key] = merge((preferredLang as any)[key], (defaultLang as any)[key])
      }
    } else {
      (preferredLang as any)[key] = (defaultLang as any)[key]
    }
  }
  return preferredLang as Language
}

export const languages = { en, fr }

export const defaultLanguage = en

export const defaultLanguageCode = \\"en\\""
`;

exports[`fsGenerator generates correct files: simple 5`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { merge, languages, defaultLanguage } from './utils'
import { Language } from './types'

// Preferred languages, as specified by the user's browser
const preferredLanguages =
  ((navigator.languages ? navigator.languages : [navigator.language]) ?? [])
    .flatMap(lang => lang.length > 2 ? [lang, lang.slice(0, 2)] : lang)
    .filter((l, i, arr) => arr.indexOf(l) === i)
    .slice(0, 25)

let language: Language = defaultLanguage // fallback language
for (let i = preferredLanguages.length; i > 0; i--) {
  const key = preferredLanguages[i] as keyof typeof languages
  if (key in languages) {
    language = merge(languages[key], language)
  }
}

export default language
"
`;

exports[`fsGenerator generates correct files: simple 6`] = `
"en.ts
fr.ts
types.d.ts
utils.ts
browser.ts
types.d.ts.map
.gitignore"
`;

exports[`fsGenerator generates correct files: simple 7`] = `"{\\"version\\":3,\\"sources\\":[\\"../resources/simple/en.json\\"],\\"names\\":[],\\"mappings\\":\\";;;0BAAA;AACG;AAEA;AACE;;AAEF;AACA\\",\\"file\\":\\"types.d.ts\\"}"`;
