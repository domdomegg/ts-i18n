// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generates correct files with two locales 1`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { Language } from \\"./types\\"
const lang = {
  yes: (): string => \\"Yes\\",
  no: (): string => \\"No\\",
  thereAreXFeatures: (p: { count: number }): string => p.count === 1 ? (\\"There is \\" + p.count.toString() + \\" feature\\") : lang.thereAreXFeatures_plural(p),
  thereAreXFeatures_plural: (p: { count: string | number }): string => \\"There are \\" + p.count.toString() + \\" features\\",
  nested: {
    works: {
      correctly: (): string => \\"Nested works correctly\\",
      really: {
        well: (): string => \\"Nested works really well\\",
      },
    },
  },
  andYouCanMissKeys: (): string => \\"And you can miss keys in non-default languages\\",
  orHaveDifferentPlaceholders: (p: { firstName: string | number }): string => \\"Or have different placeholders, \\" + p.firstName.toString() + \\"\\",
}
export default lang as Language
"
`;

exports[`generates correct files with two locales 2`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import { Language, DeepPartial } from \\"./types\\"
const lang = {
  yes: (): string => \\"Oui\\",
  no: (): string => \\"Non\\",
  thereAreXFeatures: (p: { count: number }): string => p.count === 1 ? (\\"Il y a \\" + p.count.toString() + \\" fonctionnalité\\") : lang.thereAreXFeatures_plural(p),
  thereAreXFeatures_plural: (p: { count: string | number }): string => \\"Il y a \\" + p.count.toString() + \\" fonctionnalités\\",
  nested: {
    works: {
      correctly: (): string => \\"Imbriqué fonctionne correctement\\",
      really: {
        well: (): string => \\"Imbriqué fonctionne très bien\\",
      },
    },
  },
  orHaveDifferentPlaceholders: (p: { username: string | number }): string => \\"Ou avoir des espaces réservés différents, \\" + p.username.toString() + \\"\\",
}
export default lang as DeepPartial<Language>
"
`;

exports[`generates correct files with two locales 3`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
export type DeepPartial<T> = { [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]; }
export interface Language {
  yes: () => string,
  no: () => string,
  thereAreXFeatures: (p: { count: number }) => string,
  nested: {
    works: {
      correctly: () => string,
      really: {
        well: () => string,
      },
    },
  },
  andYouCanMissKeys: () => string,
  orHaveDifferentPlaceholders: (p: { firstName: string | number, username: string | number }) => string,
}
"
`;

exports[`generates correct files with two locales 4`] = `
"// Do not edit directly, this is generated by ts-i18n
/* eslint-disable */
import en from './en'
import fr from './fr'
import { Language, DeepPartial } from './types'

/**
 * Merges two languages together, preferring the preferred language where possible
 * @param preferredLang The preferred language. NB: may be modified
 * @param defaultLang The default language. NB: may be modified
 */
export const merge = (preferredLang: DeepPartial<Language>, defaultLang: Language): Language => {
  for (const key in defaultLang) {
    if (key in preferredLang) {
      if (typeof (preferredLang as any)[key] === 'object') {
        (preferredLang as any)[key] = merge((preferredLang as any)[key], (defaultLang as any)[key])
      }
    } else {
      (preferredLang as any)[key] = (defaultLang as any)[key]
    }
  }
  return preferredLang as Language
}

export const languages = { en, fr }

export const defaultLanguage = \\"en\\""
`;
